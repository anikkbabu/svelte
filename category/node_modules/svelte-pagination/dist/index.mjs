function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.data !== data)
        text.data = data;
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}
// TODO figure out if we still want to support
// shorthand events, or if we want to implement
// a real bubbling mechanism
function bubble(component, event) {
    const callbacks = component.$$.callbacks[event.type];
    if (callbacks) {
        callbacks.slice().forEach(fn => fn(event));
    }
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if ($$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set() {
        // overridden by instance, if it has props
    }
}

/* src\components\PageView.svelte generated by Svelte v3.23.2 */

function add_css() {
	var style = element("style");
	style.id = "svelte-5wvubo-style";
	style.textContent = "li.svelte-5wvubo{display:inline-block}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let li;
	let a;
	let t;
	let li_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(/*page*/ ctx[5]);
			attr(a, "role", "button");
			attr(a, "class", /*pageLinkClassName*/ ctx[1]);
			attr(a, "href", /*href*/ ctx[4]);
			attr(a, "tabindex", "0");
			attr(a, "aria-label", /*ariaLabel*/ ctx[2]);
			attr(a, "aria-current", /*ariaCurrent*/ ctx[6]);
			attr(li, "class", li_class_value = "" + (null_to_empty(/*pageClassName*/ ctx[0]) + " svelte-5wvubo"));
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[11]),
					listen(a, "keypress", function () {
						if (is_function(/*onClick*/ ctx[3])) /*onClick*/ ctx[3].apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			if (dirty & /*page*/ 32) set_data(t, /*page*/ ctx[5]);

			if (dirty & /*pageLinkClassName*/ 2) {
				attr(a, "class", /*pageLinkClassName*/ ctx[1]);
			}

			if (dirty & /*href*/ 16) {
				attr(a, "href", /*href*/ ctx[4]);
			}

			if (dirty & /*ariaLabel*/ 4) {
				attr(a, "aria-label", /*ariaLabel*/ ctx[2]);
			}

			if (dirty & /*ariaCurrent*/ 64) {
				attr(a, "aria-current", /*ariaCurrent*/ ctx[6]);
			}

			if (dirty & /*pageClassName*/ 1 && li_class_value !== (li_class_value = "" + (null_to_empty(/*pageClassName*/ ctx[0]) + " svelte-5wvubo"))) {
				attr(li, "class", li_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { onClick = null } = $$props; // TODO fix keypress
	let { selected = false } = $$props;
	let { pageClassName = "" } = $$props;
	let { pageLinkClassName = "" } = $$props;
	let { activeClassName = "" } = $$props;
	let { activeLinkClassName = "" } = $$props;
	let { extraAriaContext = "" } = $$props;
	let { href = "" } = $$props;
	let { ariaLabel = "" } = $$props;
	let { page = 0 } = $$props;

	let defaults = {
		pageClassName,
		pageLinkClassName,
		activeClassName,
		activeLinkClassName
	};

	let ariaCurrent = null;

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("onClick" in $$props) $$invalidate(3, onClick = $$props.onClick);
		if ("selected" in $$props) $$invalidate(9, selected = $$props.selected);
		if ("pageClassName" in $$props) $$invalidate(0, pageClassName = $$props.pageClassName);
		if ("pageLinkClassName" in $$props) $$invalidate(1, pageLinkClassName = $$props.pageLinkClassName);
		if ("activeClassName" in $$props) $$invalidate(7, activeClassName = $$props.activeClassName);
		if ("activeLinkClassName" in $$props) $$invalidate(8, activeLinkClassName = $$props.activeLinkClassName);
		if ("extraAriaContext" in $$props) $$invalidate(10, extraAriaContext = $$props.extraAriaContext);
		if ("href" in $$props) $$invalidate(4, href = $$props.href);
		if ("ariaLabel" in $$props) $$invalidate(2, ariaLabel = $$props.ariaLabel);
		if ("page" in $$props) $$invalidate(5, page = $$props.page);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ariaLabel, page, extraAriaContext*/ 1060) {
			 $$invalidate(2, ariaLabel = ariaLabel || "Page " + page + (extraAriaContext ? " " + extraAriaContext : ""));
		}

		if ($$self.$$.dirty & /*selected*/ 512) {
			 if (!selected) {
				$$invalidate(1, pageLinkClassName = defaults.pageLinkClassName);
				$$invalidate(0, pageClassName = defaults.pageClassName);
				$$invalidate(7, activeClassName = defaults.activeClassName);
				$$invalidate(8, activeLinkClassName = defaults.activeLinkClassName);
			}
		}

		if ($$self.$$.dirty & /*selected, ariaLabel, page, pageClassName, activeClassName, pageLinkClassName, activeLinkClassName*/ 935) {
			 if (selected) {
				$$invalidate(6, ariaCurrent = "page");
				$$invalidate(2, ariaLabel = ariaLabel || "Page " + page + " is your current page");

				if (typeof pageClassName !== "undefined") {
					$$invalidate(0, pageClassName = pageClassName + " " + activeClassName);
				} else {
					$$invalidate(0, pageClassName = activeClassName);
				}

				if (typeof pageLinkClassName !== "undefined") {
					if (typeof activeLinkClassName !== "undefined") {
						$$invalidate(1, pageLinkClassName = pageLinkClassName + " " + activeLinkClassName);
					}
				} else {
					$$invalidate(1, pageLinkClassName = activeLinkClassName);
				}
			}
		}
	};

	return [
		pageClassName,
		pageLinkClassName,
		ariaLabel,
		onClick,
		href,
		page,
		ariaCurrent,
		activeClassName,
		activeLinkClassName,
		selected,
		extraAriaContext,
		click_handler
	];
}

class PageView extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-5wvubo-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			onClick: 3,
			selected: 9,
			pageClassName: 0,
			pageLinkClassName: 1,
			activeClassName: 7,
			activeLinkClassName: 8,
			extraAriaContext: 10,
			href: 4,
			ariaLabel: 2,
			page: 5
		});
	}
}

/* src\components\BreakView.svelte generated by Svelte v3.23.2 */

function add_css$1() {
	var style = element("style");
	style.id = "svelte-5wvubo-style";
	style.textContent = "li.svelte-5wvubo{display:inline-block}";
	append(document.head, style);
}

function create_fragment$1(ctx) {
	let li;
	let a;
	let t;
	let li_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			a = element("a");
			t = text(/*breakLabel*/ ctx[0]);
			attr(a, "class", /*breakLinkClassName*/ ctx[1]);
			attr(a, "role", "button");
			attr(a, "tabindex", "0");
			attr(li, "class", li_class_value = "" + (null_to_empty(/*className*/ ctx[3]) + " svelte-5wvubo"));
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, a);
			append(a, t);

			if (!mounted) {
				dispose = [
					listen(a, "click", /*click_handler*/ ctx[5]),
					listen(a, "keypress", function () {
						if (is_function(/*onClick*/ ctx[2])) /*onClick*/ ctx[2].apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;
			if (dirty & /*breakLabel*/ 1) set_data(t, /*breakLabel*/ ctx[0]);

			if (dirty & /*breakLinkClassName*/ 2) {
				attr(a, "class", /*breakLinkClassName*/ ctx[1]);
			}

			if (dirty & /*className*/ 8 && li_class_value !== (li_class_value = "" + (null_to_empty(/*className*/ ctx[3]) + " svelte-5wvubo"))) {
				attr(li, "class", li_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$1($$self, $$props, $$invalidate) {
	let { breakLabel = "" } = $$props;
	let { breakClassName = "" } = $$props;
	let { breakLinkClassName = "" } = $$props;
	let { onClick = null } = $$props; // TODO fix keypress
	let className = "";

	function click_handler(event) {
		bubble($$self, event);
	}

	$$self.$set = $$props => {
		if ("breakLabel" in $$props) $$invalidate(0, breakLabel = $$props.breakLabel);
		if ("breakClassName" in $$props) $$invalidate(4, breakClassName = $$props.breakClassName);
		if ("breakLinkClassName" in $$props) $$invalidate(1, breakLinkClassName = $$props.breakLinkClassName);
		if ("onClick" in $$props) $$invalidate(2, onClick = $$props.onClick);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*breakClassName*/ 16) {
			 $$invalidate(3, className = breakClassName || "break");
		}
	};

	return [
		breakLabel,
		breakLinkClassName,
		onClick,
		className,
		breakClassName,
		click_handler
	];
}

class BreakView extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-5wvubo-style")) add_css$1();

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			breakLabel: 0,
			breakClassName: 4,
			breakLinkClassName: 1,
			onClick: 2
		});
	}
}

/* src\components\Pagination.svelte generated by Svelte v3.23.2 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-1jmteg6-style";
	style.textContent = "ul.svelte-1jmteg6{display:inline-block;padding-left:15px;padding-right:15px}li.svelte-1jmteg6{display:inline-block}";
	append(document.head, style);
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[42] = list[i].itemIndex;
	child_ctx[43] = list[i].type;
	child_ctx[45] = i;
	return child_ctx;
}

// (299:4) {:else}
function create_else_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[37](/*itemIndex*/ ctx[42], ...args);
	}

	var switch_value = BreakView;

	function switch_props(ctx) {
		return {
			props: {
				key: /*itemIndex*/ ctx[42],
				breakLabel: /*breakLabel*/ ctx[2],
				breakClassName: /*breakClassName*/ ctx[10],
				breakLinkClassName: /*breakLinkClassName*/ ctx[11]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		switch_instance.$on("click", click_handler_1);
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const switch_instance_changes = {};
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.key = /*itemIndex*/ ctx[42];
			if (dirty[0] & /*breakLabel*/ 4) switch_instance_changes.breakLabel = /*breakLabel*/ ctx[2];
			if (dirty[0] & /*breakClassName*/ 1024) switch_instance_changes.breakClassName = /*breakClassName*/ ctx[10];
			if (dirty[0] & /*breakLinkClassName*/ 2048) switch_instance_changes.breakLinkClassName = /*breakLinkClassName*/ ctx[11];

			if (switch_value !== (switch_value = BreakView)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance.$on("click", click_handler_1);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (285:4) {#if type === 'PageView'}
function create_if_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;

	function click_handler(...args) {
		return /*click_handler*/ ctx[36](/*itemIndex*/ ctx[42], ...args);
	}

	var switch_value = PageView;

	function switch_props(ctx) {
		return {
			props: {
				key: /*itemIndex*/ ctx[42],
				selected: /*state*/ ctx[13].selected === /*itemIndex*/ ctx[42],
				pageClassName: /*pageClassName*/ ctx[4],
				pageLinkClassName: /*pageLinkClassName*/ ctx[5],
				activeClassName: /*activeClassName*/ ctx[6],
				activeLinkClassName: /*activeLinkClassName*/ ctx[7],
				extraAriaContext: /*extraAriaContext*/ ctx[12],
				href: /*hrefBuilderMain*/ ctx[22](/*itemIndex*/ ctx[42]),
				ariaLabel: /*ariaLabelBuilderMain*/ ctx[23](/*itemIndex*/ ctx[42]),
				page: /*itemIndex*/ ctx[42]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
		switch_instance.$on("click", click_handler);
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const switch_instance_changes = {};
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.key = /*itemIndex*/ ctx[42];
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.selected = /*state*/ ctx[13].selected === /*itemIndex*/ ctx[42];
			if (dirty[0] & /*pageClassName*/ 16) switch_instance_changes.pageClassName = /*pageClassName*/ ctx[4];
			if (dirty[0] & /*pageLinkClassName*/ 32) switch_instance_changes.pageLinkClassName = /*pageLinkClassName*/ ctx[5];
			if (dirty[0] & /*activeClassName*/ 64) switch_instance_changes.activeClassName = /*activeClassName*/ ctx[6];
			if (dirty[0] & /*activeLinkClassName*/ 128) switch_instance_changes.activeLinkClassName = /*activeLinkClassName*/ ctx[7];
			if (dirty[0] & /*extraAriaContext*/ 4096) switch_instance_changes.extraAriaContext = /*extraAriaContext*/ ctx[12];
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.href = /*hrefBuilderMain*/ ctx[22](/*itemIndex*/ ctx[42]);
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.ariaLabel = /*ariaLabelBuilderMain*/ ctx[23](/*itemIndex*/ ctx[42]);
			if (dirty[0] & /*state*/ 8192) switch_instance_changes.page = /*itemIndex*/ ctx[42];

			if (switch_value !== (switch_value = PageView)) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					switch_instance.$on("click", click_handler);
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

// (284:2) {#each state.items as { itemIndex, type }
function create_each_block(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[43] === "PageView") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function create_fragment$2(ctx) {
	let ul;
	let li0;
	let a0;
	let t0;
	let a0_href_value;
	let li0_class_value;
	let t1;
	let t2;
	let li1;
	let a1;
	let t3;
	let a1_href_value;
	let li1_class_value;
	let ul_class_value;
	let current;
	let mounted;
	let dispose;
	let each_value = /*state*/ ctx[13].items;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			ul = element("ul");
			li0 = element("li");
			a0 = element("a");
			t0 = text(/*previousLabel*/ ctx[0]);
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			li1 = element("li");
			a1 = element("a");
			t3 = text(/*nextLabel*/ ctx[1]);
			attr(a0, "class", /*previousLinkClassName*/ ctx[8]);
			attr(a0, "href", a0_href_value = /*hrefBuilderMain*/ ctx[22](/*state*/ ctx[13].selected - 1));
			attr(a0, "tabindex", "0");
			attr(a0, "role", "button");
			attr(a0, "aria-disabled", /*previousAriaDisabled*/ ctx[16]);
			attr(li0, "class", li0_class_value = "" + (null_to_empty(/*previousClasses*/ ctx[14]) + " svelte-1jmteg6"));
			attr(a1, "class", /*nextLinkClassName*/ ctx[9]);
			attr(a1, "href", a1_href_value = /*hrefBuilderMain*/ ctx[22](/*state*/ ctx[13].selected + 1));
			attr(a1, "tabindex", "0");
			attr(a1, "role", "button");
			attr(a1, "aria-disabled", /*nextAriaDisabled*/ ctx[17]);
			attr(li1, "class", li1_class_value = "" + (null_to_empty(/*nextClasses*/ ctx[15]) + " svelte-1jmteg6"));
			attr(ul, "class", ul_class_value = "" + (null_to_empty(/*containerClassName*/ ctx[3]) + " svelte-1jmteg6"));
		},
		m(target, anchor) {
			insert(target, ul, anchor);
			append(ul, li0);
			append(li0, a0);
			append(a0, t0);
			append(ul, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append(ul, t2);
			append(ul, li1);
			append(li1, a1);
			append(a1, t3);
			current = true;

			if (!mounted) {
				dispose = [
					listen(a0, "click", /*handlePreviousPage*/ ctx[18]),
					listen(a0, "keypress", /*handlePreviousPage*/ ctx[18]),
					listen(a1, "click", /*handleNextPage*/ ctx[19]),
					listen(a1, "keypress", /*handleNextPage*/ ctx[19])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*previousLabel*/ 1) set_data(t0, /*previousLabel*/ ctx[0]);

			if (!current || dirty[0] & /*previousLinkClassName*/ 256) {
				attr(a0, "class", /*previousLinkClassName*/ ctx[8]);
			}

			if (!current || dirty[0] & /*state*/ 8192 && a0_href_value !== (a0_href_value = /*hrefBuilderMain*/ ctx[22](/*state*/ ctx[13].selected - 1))) {
				attr(a0, "href", a0_href_value);
			}

			if (!current || dirty[0] & /*previousAriaDisabled*/ 65536) {
				attr(a0, "aria-disabled", /*previousAriaDisabled*/ ctx[16]);
			}

			if (!current || dirty[0] & /*previousClasses*/ 16384 && li0_class_value !== (li0_class_value = "" + (null_to_empty(/*previousClasses*/ ctx[14]) + " svelte-1jmteg6"))) {
				attr(li0, "class", li0_class_value);
			}

			if (dirty[0] & /*state, pageClassName, pageLinkClassName, activeClassName, activeLinkClassName, extraAriaContext, hrefBuilderMain, ariaLabelBuilderMain, handlePageSelected, breakLabel, breakClassName, breakLinkClassName, handleBreakClick*/ 15744244) {
				each_value = /*state*/ ctx[13].items;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(ul, t2);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty[0] & /*nextLabel*/ 2) set_data(t3, /*nextLabel*/ ctx[1]);

			if (!current || dirty[0] & /*nextLinkClassName*/ 512) {
				attr(a1, "class", /*nextLinkClassName*/ ctx[9]);
			}

			if (!current || dirty[0] & /*state*/ 8192 && a1_href_value !== (a1_href_value = /*hrefBuilderMain*/ ctx[22](/*state*/ ctx[13].selected + 1))) {
				attr(a1, "href", a1_href_value);
			}

			if (!current || dirty[0] & /*nextAriaDisabled*/ 131072) {
				attr(a1, "aria-disabled", /*nextAriaDisabled*/ ctx[17]);
			}

			if (!current || dirty[0] & /*nextClasses*/ 32768 && li1_class_value !== (li1_class_value = "" + (null_to_empty(/*nextClasses*/ ctx[15]) + " svelte-1jmteg6"))) {
				attr(li1, "class", li1_class_value);
			}

			if (!current || dirty[0] & /*containerClassName*/ 8 && ul_class_value !== (ul_class_value = "" + (null_to_empty(/*containerClassName*/ ctx[3]) + " svelte-1jmteg6"))) {
				attr(ul, "class", ul_class_value);
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { pageCount = 10 } = $$props;
	let { pageRangeDisplayed = 2 } = $$props;
	let { marginPagesDisplayed = 3 } = $$props;
	let { previousLabel = "Previous" } = $$props;
	let { nextLabel = "Next" } = $$props;
	let { breakLabel = "..." } = $$props;
	let { hrefBuilder } = $$props;
	let { initialPage } = $$props;
	let { forcePage } = $$props;
	let { disableInitialCallback = false } = $$props;
	let { containerClassName } = $$props;
	let { pageClassName } = $$props;
	let { pageLinkClassName } = $$props;
	let { activeClassName = "selected" } = $$props;
	let { activeLinkClassName } = $$props;
	let { previousClassName = "previous" } = $$props;
	let { nextClassName = "next" } = $$props;
	let { previousLinkClassName } = $$props;
	let { nextLinkClassName } = $$props;
	let { disabledClassName = "disabled" } = $$props;
	let { breakClassName } = $$props;
	let { breakLinkClassName } = $$props;
	let { extraAriaContext } = $$props;
	let { ariaLabelBuilder } = $$props;
	let { startPageIndex = 1 } = $$props;
	const dispatch = createEventDispatcher();

	// initial state setup
	let initialSelected;

	if (initialPage) {
		initialSelected = initialPage;
	} else if (forcePage) {
		initialSelected = forcePage;
	} else {
		initialSelected = 1;
	}

	let state = { selected: initialSelected };

	function handlePreviousPage(evt) {
		const { selected } = state;

		evt.preventDefault
		? evt.preventDefault()
		: evt.returnValue = false;

		if (selected > 0) {
			handlePageSelected(selected - 1, evt);
		}
	}

	function handleNextPage(evt) {
		const { selected } = state;

		evt.preventDefault
		? evt.preventDefault()
		: evt.returnValue = false;

		if (selected < pageCount - 1) {
			handlePageSelected(selected + 1, evt);
		}
	}

	function handlePageSelected(selected, event) {
		event.preventDefault
		? event.preventDefault()
		: event.returnValue = false;

		if (state.selected === selected) return;
		$$invalidate(13, state.selected = selected, state);

		// Call the callback with the new selected item:
		dispatch("change", { selected, event });
	}

	function getForwardJump() {
		const { selected } = state;
		const forwardJump = selected + pageRangeDisplayed;
		return forwardJump >= pageCount ? pageCount - 1 : forwardJump;
	}

	function getBackwardJump() {
		const { selected } = state;
		const backwardJump = selected - pageRangeDisplayed;
		return backwardJump < 0 ? 0 : backwardJump;
	}

	function handleBreakClick(index, evt) {
		evt.preventDefault
		? evt.preventDefault()
		: evt.returnValue = false;

		const { selected } = state;
		handlePageSelected(selected < index ? getForwardJump() : getBackwardJump(), evt);
	}

	function hrefBuilderMain(pageIndex) {
		if (hrefBuilder && pageIndex !== state.selected && pageIndex >= startPageIndex && pageIndex < pageCount) {
			return hrefBuilder(pageIndex + 1);
		}
	}

	function ariaLabelBuilderMain(pageIndex) {
		const selected = pageIndex === state.selected;

		if (ariaLabelBuilder && pageIndex >= 0 && pageIndex < pageCount) {
			let label = ariaLabelBuilder(pageIndex + 1, selected);

			// DEPRECATED: The extraAriaContext prop was used to add additional context
			// to the aria-label. Users should now use the ariaLabelBuilder instead.
			if (extraAriaContext && !selected) {
				label = label + " " + extraAriaContext;
			}

			return label;
		}
	}

	// function getPageElement(index) {
	//   const { selected } = state;
	//   return (
	//     <PageView
	//       key={index}
	//       on:click={this.handlePageSelected.bind(null, index)}
	//       selected={selected === index}
	//       pageClassName={pageClassName}
	//       pageLinkClassName={pageLinkClassName}
	//       activeClassName={activeClassName}
	//       activeLinkClassName={activeLinkClassName}
	//       extraAriaContext={extraAriaContext}
	//       href={this.hrefBuilderMain(index)}
	//       ariaLabel={this.ariaLabelBuilderMain(index)}
	//       page={index + 1}
	//     />
	//   );
	// }
	let previousClasses = "";

	let nextClasses = "";
	let previousAriaDisabled = "";
	let nextAriaDisabled = "";
	const click_handler = (itemIndex, e) => handlePageSelected(itemIndex, e);
	const click_handler_1 = (itemIndex, e) => handleBreakClick(itemIndex, e);

	$$self.$set = $$props => {
		if ("pageCount" in $$props) $$invalidate(24, pageCount = $$props.pageCount);
		if ("pageRangeDisplayed" in $$props) $$invalidate(25, pageRangeDisplayed = $$props.pageRangeDisplayed);
		if ("marginPagesDisplayed" in $$props) $$invalidate(26, marginPagesDisplayed = $$props.marginPagesDisplayed);
		if ("previousLabel" in $$props) $$invalidate(0, previousLabel = $$props.previousLabel);
		if ("nextLabel" in $$props) $$invalidate(1, nextLabel = $$props.nextLabel);
		if ("breakLabel" in $$props) $$invalidate(2, breakLabel = $$props.breakLabel);
		if ("hrefBuilder" in $$props) $$invalidate(27, hrefBuilder = $$props.hrefBuilder);
		if ("initialPage" in $$props) $$invalidate(28, initialPage = $$props.initialPage);
		if ("forcePage" in $$props) $$invalidate(29, forcePage = $$props.forcePage);
		if ("disableInitialCallback" in $$props) $$invalidate(30, disableInitialCallback = $$props.disableInitialCallback);
		if ("containerClassName" in $$props) $$invalidate(3, containerClassName = $$props.containerClassName);
		if ("pageClassName" in $$props) $$invalidate(4, pageClassName = $$props.pageClassName);
		if ("pageLinkClassName" in $$props) $$invalidate(5, pageLinkClassName = $$props.pageLinkClassName);
		if ("activeClassName" in $$props) $$invalidate(6, activeClassName = $$props.activeClassName);
		if ("activeLinkClassName" in $$props) $$invalidate(7, activeLinkClassName = $$props.activeLinkClassName);
		if ("previousClassName" in $$props) $$invalidate(31, previousClassName = $$props.previousClassName);
		if ("nextClassName" in $$props) $$invalidate(32, nextClassName = $$props.nextClassName);
		if ("previousLinkClassName" in $$props) $$invalidate(8, previousLinkClassName = $$props.previousLinkClassName);
		if ("nextLinkClassName" in $$props) $$invalidate(9, nextLinkClassName = $$props.nextLinkClassName);
		if ("disabledClassName" in $$props) $$invalidate(33, disabledClassName = $$props.disabledClassName);
		if ("breakClassName" in $$props) $$invalidate(10, breakClassName = $$props.breakClassName);
		if ("breakLinkClassName" in $$props) $$invalidate(11, breakLinkClassName = $$props.breakLinkClassName);
		if ("extraAriaContext" in $$props) $$invalidate(12, extraAriaContext = $$props.extraAriaContext);
		if ("ariaLabelBuilder" in $$props) $$invalidate(34, ariaLabelBuilder = $$props.ariaLabelBuilder);
		if ("startPageIndex" in $$props) $$invalidate(35, startPageIndex = $$props.startPageIndex);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*state, pageCount, pageRangeDisplayed, marginPagesDisplayed, breakLabel*/ 117448708 | $$self.$$.dirty[1] & /*startPageIndex*/ 16) {
			 {
				const items = [];
				const { selected } = state;

				if (pageCount <= pageRangeDisplayed) {
					for (let index = startPageIndex; index < pageCount; index++) {
						items.push({ itemIndex: index, type: "PageView" });
					}
				} else {
					let leftSide = pageRangeDisplayed / 2;
					let rightSide = pageRangeDisplayed - leftSide;

					// If the selected page index is on the default right side of the pagination,
					// we consider that the new right side is made up of it (= only one break element).
					// If the selected page index is on the default left side of the pagination,
					// we consider that the new left side is made up of it (= only one break element).
					if (selected > pageCount - pageRangeDisplayed / 2) {
						rightSide = pageCount - selected;
						leftSide = pageRangeDisplayed - rightSide;
					} else if (selected < pageRangeDisplayed / 2) {
						leftSide = selected;
						rightSide = pageRangeDisplayed - leftSide;
					}

					let index;
					let page;
					let breakView;

					for (index = startPageIndex; index < pageCount; index++) {
						page = index;

						// If the page index is lower than the margin defined,
						// the page has to be displayed on the left side of
						// the pagination.
						if (page <= marginPagesDisplayed) {
							//items.push(createPageView(index));
							items.push({ itemIndex: index, type: "PageView" });

							continue;
						}

						// If the page index is greater than the page count
						// minus the margin defined, the page has to be
						// displayed on the right side of the pagination.
						if (page > pageCount - marginPagesDisplayed) {
							//items.push(createPageView(index));
							items.push({ itemIndex: index, type: "PageView" });

							continue;
						}

						// If the page index is near the selected page index
						// and inside the defined range (pageRangeDisplayed)
						// we have to display it (it will create the center
						// part of the pagination).
						if (index >= selected - leftSide && index <= selected + rightSide) {
							//items.push(createPageView(index));
							items.push({ itemIndex: index, type: "PageView" });

							continue;
						}

						// If the page index doesn't meet any of the conditions above,
						// we check if the last item of the current "items" array
						// is a break element. If not, we add a break element, else,
						// we do nothing (because we don't want to display the page).
						if (breakLabel && items[items.length - 1] !== breakView) {
							breakView = // <BreakView
							//   key={index}
							//   breakLabel={breakLabel}
							//   breakClassName={breakClassName}
							//   breakLinkClassName={breakLinkClassName}
							//   on:click={this.handleBreakClick.bind(null, index)}
							// />
							items.push({ itemIndex: index, type: "BreakView" });

							items.push(breakView);
						}
					}
				}

				$$invalidate(13, state.items = items, state);
			}
		}

		if ($$self.$$.dirty[0] & /*state*/ 8192 | $$self.$$.dirty[1] & /*previousClassName, startPageIndex, disabledClassName*/ 21) {
			 $$invalidate(14, previousClasses = previousClassName + (state.selected === startPageIndex
			? ` ${disabledClassName}`
			: ""));
		}

		if ($$self.$$.dirty[0] & /*state, pageCount*/ 16785408 | $$self.$$.dirty[1] & /*nextClassName, disabledClassName*/ 6) {
			 $$invalidate(15, nextClasses = nextClassName + (state.selected === pageCount - 1
			? ` ${disabledClassName}`
			: ""));
		}

		if ($$self.$$.dirty[0] & /*state*/ 8192 | $$self.$$.dirty[1] & /*startPageIndex*/ 16) {
			 $$invalidate(16, previousAriaDisabled = state.selected === startPageIndex ? "true" : "false");
		}

		if ($$self.$$.dirty[0] & /*state, pageCount*/ 16785408) {
			 $$invalidate(17, nextAriaDisabled = state.selected === pageCount - 1 ? "true" : "false");
		}
	};

	return [
		previousLabel,
		nextLabel,
		breakLabel,
		containerClassName,
		pageClassName,
		pageLinkClassName,
		activeClassName,
		activeLinkClassName,
		previousLinkClassName,
		nextLinkClassName,
		breakClassName,
		breakLinkClassName,
		extraAriaContext,
		state,
		previousClasses,
		nextClasses,
		previousAriaDisabled,
		nextAriaDisabled,
		handlePreviousPage,
		handleNextPage,
		handlePageSelected,
		handleBreakClick,
		hrefBuilderMain,
		ariaLabelBuilderMain,
		pageCount,
		pageRangeDisplayed,
		marginPagesDisplayed,
		hrefBuilder,
		initialPage,
		forcePage,
		disableInitialCallback,
		previousClassName,
		nextClassName,
		disabledClassName,
		ariaLabelBuilder,
		startPageIndex,
		click_handler,
		click_handler_1
	];
}

class Pagination extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1jmteg6-style")) add_css$2();

		init(
			this,
			options,
			instance$2,
			create_fragment$2,
			safe_not_equal,
			{
				pageCount: 24,
				pageRangeDisplayed: 25,
				marginPagesDisplayed: 26,
				previousLabel: 0,
				nextLabel: 1,
				breakLabel: 2,
				hrefBuilder: 27,
				initialPage: 28,
				forcePage: 29,
				disableInitialCallback: 30,
				containerClassName: 3,
				pageClassName: 4,
				pageLinkClassName: 5,
				activeClassName: 6,
				activeLinkClassName: 7,
				previousClassName: 31,
				nextClassName: 32,
				previousLinkClassName: 8,
				nextLinkClassName: 9,
				disabledClassName: 33,
				breakClassName: 10,
				breakLinkClassName: 11,
				extraAriaContext: 12,
				ariaLabelBuilder: 34,
				startPageIndex: 35
			},
			[-1, -1]
		);
	}
}

export default Pagination;
